
@{
    Layout = null;
    //@model  IEnumerable<WebApplicationWZH.Models.SysRole>
}
@model  WebApplicationWZH.ViewModel.MenuViewModel
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <!-- jQuery -->
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <!-- bootstrap -->
    <script src="~/Scripts/bootstrap.min.js"></script>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <!-- ztree -->
    <link href="~/HuiAdmin/lib/zTreev3/css/zTreeStyle/zTreeStyle.css" rel="stylesheet" />
    <script src="~/HuiAdmin/lib/zTreev3/js/jquery.ztree.core.min.js"></script>
    <script src="~/HuiAdmin/lib/zTreev3/js/jquery.ztree.excheck.min.js"></script>

    <!-- font-awesome -->
    <link href="~/Scripts/dlshouwengrid/dependents/fontAwesome/css/font-awesome.min.css" rel="stylesheet" media="all" />

    <!-- DLShouWen Grid httpss://os.dlshouwen.com/grid/doc/i18n/zh-cn/reference.html -->
    <script src="~/Scripts/dlshouwengrid/dlshouwen.grid.js?v=1.2"></script>
    <script src="~/Scripts/dlshouwengrid/i18n/zh-cn.js"></script>
    <link href="~/Scripts/dlshouwengrid/dlshouwen.grid.min.css" rel="stylesheet" />
    <!-- datePicker -->
    <script src="~/Scripts/dlshouwengrid/dependents/datePicker/WdatePicker.js" defer="defer"></script>
    <link href="~/Scripts/dlshouwengrid/dependents/datePicker/skin/WdatePicker.css" rel="stylesheet" />
    <link href="~/Scripts/dlshouwengrid/dependents/datePicker/skin/default/datepicker.css" rel="stylesheet" />

    <style>
         
    </style>
</head>
<body>
    @{
        var roles = Model.sysRoles;

    }
    <div class="container" style="margin-top:10px;">
        <div class="row">
            <div class="col-md-12" style="background-color: white; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
                <div class="row">
                    <div class="col-md-12" style="background-color: white; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">

                        第二列 - 分为四个盒子.

                    </div>

                </div>
                <div class="row">
                    <!--background-color: #dedef8; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;-->
                    <div class="col-md-3" style="background-color: white; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">

                        <div style="border-bottom: solid 1px #ff0000; padding: 10px; ">
                            <button class="btn-primary btn-sm" id="checkAllTrue" disabled>全选</button>
                            <button class="btn-danger btn-sm" id="checkAllFalse" disabled>全不选</button>
                            <button class="btn-info btn-sm" id="test">测试</button>
                        </div>

                        <ul id="treeDemo" class="ztree"></ul>
                        <ul id="treeDemo2" class="ztree" style="display:none"></ul>
                        <ul id="treeDemo3" class="ztree" style="display:none">></ul>
                    </div>
                    <div class="col-md-2" style="background-color: white; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
                        <div style="border-bottom: solid 1px #ff0000; padding: 10px:">
                            <button class="btn-primary btn-sm" id="SaveRoleMenu" style="margin: 10px;">保存权限</button>
                        </div>

                        @{
                            int m = 1;
                            string ck = "";
                            foreach (var t in roles)
                            {
                                ck = m == 1000 ? "checked" : "";
                                <div class="radio">
                                    <label>
                                        <input onclick="radioclick(this,@t.RoleID)" type="radio" name="optionsRadios" id="role_@t.RoleID" value="@t.RoleID" @ck>@t.OrderRule . @t.RoleName
                                    </label>
                                </div>
                                m++;
                            }
                        }
                    </div>
                    <div class="col-md-7" style="background-color: white; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444; ">
                        <div style="border-bottom: solid 1px #ff0000; padding: 10px:">
                            <button class="btn-danger btn-sm" id="DeleteUserRole" style="margin: 10px;">删除</button>
                        </div>
                        <div>
                            <div id="gridContainer_2_1_1" class="dlshouwen-grid-container"></div>
                            <div id="gridToolBarContainer_2_1_1" class="dlshouwen-grid-toolbar-container"></div>
                        </div>
                    </div>



                </div>

            </div>

        </div>
    </div>

    <div class="container" style="display:none">

        <h5>Hello, world!</h5>

        <div class="row">
            <p>排序前</p>
            <div class="col-md-4" style="background-color: white;
         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
                我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd
                我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd我在左边adadasdasd
            </div>
            <div class="col-md-8" style="background-color: white; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
                我在右边
            </div>
        </div><br>
        <div class="row">
            <p>排序后</p>
            <div class="col-md-4 col-md-push-8"
                 style="background-color: #dedef8;
         box-shadow: inset 1px -1px 1px #444,
         inset -1px 1px 1px #444;">
                我在左边
            </div>
            <div class="col-md-8 col-md-pull-4"
                 style="background-color: #dedef8;
         box-shadow: inset 1px -1px 1px #444,
         inset -1px 1px 1px #444;">
                我在右边
            </div>
        </div>

    </div>

    @Html.AntiForgeryToken()
    <script>
        var zTreeObj;
        // zTree 的参数配置，深入使用请参考 API 文档（setting 配置详解）
        var setting8 = {
            check: {
                enable: true
            }
        };
        var setting11 = {
            check: {
                enable: true
            },
            data: {
                simpleData: {
                    enable: false
                }
            },
            callback: {
                onClick: zTreeOnClick
            }
        };

        function zTreeOnClick(event, treeId, treeNode) {
            alert(treeNode.tId + ", " + treeNode.name + ", " + treeNode.url);
        };
        // zTree 的数据属性，深入使用请参考 API 文档（zTreeNode 节点数据详解）
        var zNodes = [
            {
                name: "test1", open: true, children: [
                    { name: "test1_1" }, { name: "test1_2" }]
            },
            {
                name: "test2", open: true, children: [
                    { name: "test2_1" }, { name: "test2_2" }]
            }
        ];
        $(document).ready(function () {
            $.get("/menu/GetSysMenus", function (res) {

                var nodes = res;
                console.log(nodes);
                zTreeObj = $.fn.zTree.init($("#treeDemo"), setting11, nodes);
                //zTreeObj = $.fn.zTree.init($("#treeDemo"), setting, zNodes);

                document.getElementById("checkAllTrue").disabled = false
                document.getElementById("checkAllFalse").disabled = false;



            })

            $("#checkAllTrue").bind("click", { type: "checkAllTrue" }, checkNode);
            $("#checkAllFalse").bind("click", { type: "checkAllFalse" }, checkNode);

            function checkNode(e) {
                var zTree = $.fn.zTree.getZTreeObj("treeDemo"),
                    type = e.data.type,
                    nodes = zTree.getSelectedNodes();
                if (type.indexOf("All") < 0 && nodes.length == 0) {
                    alert("请先选择一个节点");
                }

                if (type == "checkAllTrue") {
                    zTree.checkAllNodes(true);
                } else if (type == "checkAllFalse") {
                    zTree.checkAllNodes(false);
                } else {
                    var callbackFlag = $("#callbackTrigger").attr("checked");
                    for (var i = 0, l = nodes.length; i < l; i++) {
                        if (type == "checkTrue") {
                            zTree.checkNode(nodes[i], true, false, callbackFlag);
                        } else if (type == "checkFalse") {
                            zTree.checkNode(nodes[i], false, false, callbackFlag);
                        } else if (type == "toggle") {
                            zTree.checkNode(nodes[i], null, false, callbackFlag);
                        } else if (type == "checkTruePS") {
                            zTree.checkNode(nodes[i], true, true, callbackFlag);
                        } else if (type == "checkFalsePS") {
                            zTree.checkNode(nodes[i], false, true, callbackFlag);
                        } else if (type == "togglePS") {
                            zTree.checkNode(nodes[i], null, true, callbackFlag);
                        }
                    }
                }
            }

            $("#test").click(function () {


                var nodes = zTreeObj.getCheckedNodes();// 复选框选中的节点
                var nodes2 = zTreeObj.getNodes();// 所有节点

                //console.log(nodes);
                let aa = [1];
                for (let i = 0; i < nodes2.length; i++) {

                    //zTreeObj.checkNode(nodes2[i], true, true);
                    let n = (nodes2[i].id);
                    // if (nodes[i].id)
                    //if (n % 2 == 0)
                    if (aa.indexOf(n) > -1 && nodes2[i].isParent == true) {
                        zTreeObj.checkNode(nodes2[i], true, true);
                        console.log(nodes2[i]);
                    }

                }
                // zTreeObj.checkNode(nodes2[0], true, true);


            });

            $("#SaveRoleMenu").click(function () {

                var radio = document.querySelector('.col-md-2 input[name="optionsRadios"]:checked');
                //window.parent.showmsg("您选择的是：" + radio.value);
                //alert("您选择的是：" + radio.value);
                if (radio == null || radio == undefined || radio == "") {
                    log("请选择一个角色名称后再保存数据！");
                    return;
                }
                let nodes = zTreeObj.getCheckedNodes();// 复选框选中的节点
                let Arr = [];
                for (let i = 0; i < nodes.length; i++) {
                    let n = (nodes[i].id);
                    Arr.push(n);
                }
                let data = radio.value + "=" + Arr.join(",");
                //$(".col-md-7").html(JSON.stringify(Arr));
                $(".col-md-7").html(data);
            });



        });
        function radioclick2(obj) {
            //log("xxx")
            console.log(obj);
            //document.getElementById().style.color
            //obj.style.background = "blueviolet";
        }
        function log(msg) {

            let showmsg = window.parent.showmsg;
            if (showmsg == null || showmsg == undefined) {
                alert(msg);
            } else {
                showmsg(msg, 2, 3000);
            }

        }
    </script>
    <script>
        //定义接收节点数据的变量
        var zNodes2;
        //节点配置信息
        var setting2 = {
            data: {
                //控制子节点加载时候是加载还是折叠
                simpleData: {
                    enable: true
                }
            }
        };
        $(function () {

            var dd = [
                { id: 1, pId: 0, iconOpen: null, conClose: null, open: false, isParent: true, name: "首页        ", icon: null }
                , { id: 2, pId: 0, iconOpen: null, iconClose: null, open: false, isParent: true, name: "攻略", icon: null }
                , { id: 3, pId: 2, iconOpen: null, iconClose: null, open: false, isParent: false, name: "王者攻略 ", icon: null }
                , { id: 4, pId: 2, iconOpen: null, iconClose: null, open: false, isParent: false, name: "王者攻略2 ", icon: null }
            ];
            //获取访问方法获取节点数据
            $.getJSON('/Menu/GetjsonDb', function (res) {
                // $.get('/Menu/GetjsonDb', function (res) {
                zNodes2 = res;
                console.log(res);
                console.log(zNodes2);
                //初始化树节点
                $.fn.zTree.init($("#treeDemo2"), setting2, zNodes2);
                //$.fn.zTree.init($("#treeDemo"), setting2, dd);
            })
        });
    </script>
    <script>
        //https://pythonjishu.com/fwhsfqpucuktbda/
        //https://blog.csdn.net/zouzoutingtinging/article/details/79212175
        //https://blog.csdn.net/qq_26312205/article/details/107718641

        //https://www.cnblogs.com/puke/archive/2012/08/10/2631513.html
        var setting = {
            async: {
                enable: true, //异步加载开关
                url: "getNodes", //异步加载的URL地址
                autoParam: ["id"], //异步加载需要传入的参数，默认是id
                dataFilter: filter //数据预处理函数
            }
        };

        function filter(treeId, parentNode, childNodes) {
            if (!childNodes) return null;
            for (var i = 0, l = childNodes.length; i < l; i++) {
                childNodes[i].name = childNodes[i].name.replace(/\.n/g, '.');
            }
            return childNodes;
        }
        $(document).ready(function () {
            //配置树状结构
            $.fn.zTree.init($("#treeDemo3"), setting);
        });
    </script>
    <script type="text/javascript">
		<!--
        var setting4 = {
            check: {
                enable: true
            },
            data: {
                simpleData: {
                    enable: true
                }
            }
        };

        var zNodes4 = [
            { id: 1, pId: 0, name: "can check 1", open: true },
            { id: 11, pId: 1, name: "can check 1-1", open: true },
            { id: 111, pId: 11, name: "can check 1-1-1" },
            { id: 112, pId: 11, name: "can check 1-1-2" },
            { id: 12, pId: 1, name: "can check 1-2", open: true },
            { id: 121, pId: 12, name: "can check 1-2-1" },
            { id: 122, pId: 12, name: "can check 1-2-2" },
            { id: 2, pId: 0, name: "can check 2", checked: true, open: true },
            { id: 21, pId: 2, name: "can check 2-1" },
            { id: 22, pId: 2, name: "can check 2-2", open: true },
            { id: 221, pId: 22, name: "can check 2-2-1", checked: true },
            { id: 222, pId: 22, name: "can check 2-2-2" },
            { id: 23, pId: 2, name: "can check 2-3" }
        ];

        var code;

        function setCheck() {
            var zTree = $.fn.zTree.getZTreeObj("treeDemo"),
                py = $("#py").attr("checked") ? "p" : "",
                sy = $("#sy").attr("checked") ? "s" : "",
                pn = $("#pn").attr("checked") ? "p" : "",
                sn = $("#sn").attr("checked") ? "s" : "",
                type = { "Y": py + sy, "N": pn + sn };
            zTree.setting.check.chkboxType = type;
            showCode('setting.check.chkboxType = { "Y" : "' + type.Y + '", "N" : "' + type.N + '" };');
        }
        function showCode(str) {
            if (!code) code = $("#code");
            code.empty();
            code.append("<li>" + str + "</li>");
        }

        $(document).ready(function () {
            return;
            $.fn.zTree.init($("#treeDemo"), setting4, zNodes4);
            setCheck();
            $("#py").bind("change", setCheck);
            $("#sy").bind("change", setCheck);
            $("#pn").bind("change", setCheck);
            $("#sn").bind("change", setCheck);
        });
        //-->
    </script>
    <script>
        //映射内容
        var sex = { 1: '男', 2: '女' };
        var degree = { 1: '小学', 2: '初中', 3: '高中', 4: '中专', 5: '大学', 6: '硕士', 7: '博士', 8: '其他' };
        //模拟数据（薪水在6000-12000之间，日期在1980-01-01 00::00:00到2014-10-01 00:00:00之间）
        var datas = new Array();
        for (var i = 0; i < 186; i++) {
            var user = new Object();
            user.user_id = 'user_' + i;
            user.user_code = 'user_' + i;
            user.user_name = '模拟用户' + (Math.floor(Math.random() * 1000) + 10000) + '号';
            user.sex = (Math.floor(Math.random() * 2) + 1);
            user.salary = (Math.floor(Math.random() * 6000) + 6000);
            user.degree = (Math.floor(Math.random() * 8) + 1);
            user.time = new Date(Math.floor(Math.random() * 1096588800000) + 315504000000);
            user.time_stamp_s = Math.floor((Math.floor(Math.random() * 1096588800000) + 315504000000) / 1000);
            user.time_stamp_ms = Math.floor(Math.random() * 1096588800000) + 315504000000;
            user.string_date = $.fn.dlshouwen.grid.tools.dateFormat(new Date(Math.floor(Math.random() * 1096588800000) + 315504000000), 'yyyy-MM-dd');
            user.string_time = $.fn.dlshouwen.grid.tools.dateFormat(new Date(Math.floor(Math.random() * 1096588800000) + 315504000000), 'yyyy-MM-dd hh:mm:ss');
            datas.push(user);
        }
        //定义表格
        var gridColumns = [
            { id: 'user_code', title: '用户编号', type: 'string', columnClass: 'text-center', fastQuery: true, fastQueryType: 'eq' },
            { id: 'user_name', title: '用户名称', type: 'string', columnClass: 'text-center', fastQuery: true, fastQueryType: 'lk' },
            {
                id: 'sex', title: '性别', type: 'string', codeTable: sex, columnClass: 'text-center', hideType: 'xs', fastQuery: true, fastQueryType: 'eq', resolution: function (record, value) {
                    var content = '';
                    if (value == 1) {
                        content += '<span style="background:#00a2ca;padding:2px 10px;color:white;">Male</span>';
                    } else {
                        content += '<span style="background:#c447ae;padding:2px 10px;color:white;">Female</span>';
                    }
                    return content;
                }
            },
            { id: 'salary', title: '薪水', type: 'number', format: '#,###.00', columnClass: 'text-center', hideType: 'xs', fastQuery: true, fastQueryType: 'range' },
            { id: 'degree', title: '学历', type: 'string', codeTable: degree, columnClass: 'text-center', hideType: 'sm|xs', fastQuery: true, fastQueryType: 'eq' },
            { id: 'time', title: '日期对象', type: 'date', format: 'yyyy-MM-dd hh:mm:ss', columnClass: 'text-center', hideType: 'md|sm|xs', fastQuery: true, fastQueryType: 'range' },
            { id: 'time_stamp_s', title: '秒级时间戳', type: 'date', format: 'yyyy-MM-dd hh:mm:ss', otype: 'time_stamp_s', columnClass: 'text-center', hideType: 'lg|md|sm|xs', fastQuery: true, fastQueryType: 'range' },
            { id: 'time_stamp_ms', title: '毫秒级时间戳', type: 'date', format: 'yyyy-MM-dd hh:mm:ss', otype: 'time_stamp_ms', columnClass: 'text-center', hideType: 'lg|md|sm|xs', fastQuery: true, fastQueryType: 'range' },
            { id: 'string_date', title: '日期格式字符串', type: 'date', format: 'yyyy-MM-dd', otype: 'string', oformat: 'yyyy-MM-dd', columnClass: 'text-center', hideType: 'lg|md|sm|xs', fastQuery: true, fastQueryType: 'range' },
            { id: 'string_time', title: '时间格式字符串', type: 'date', format: 'yyyy-MM-dd hh:mm:ss', otype: 'string', oformat: 'yyyy-MM-dd hh:mm:ss', columnClass: 'text-center', hideType: 'lg|md|sm|xs', fastQuery: true, fastQueryType: 'range' }
        ];
        var gridOption = {
            ajaxLoad: false,
            exportFileName: '用户列表',
            datas: datas,
            columns: gridColumns,
            pageSize: 10
        };
        var grid = $.fn.dlshouwen.grid.init(gridOption);
        $(function () {
           // grid.load();
        });
    </script>
    <script>
        var sex = { 1: '男', 2: '女' };
        var gridColumns_2_1_1 = [
            { id: 'user_code', title: '用户编号', type: 'string', columnClass: 'text-center' },
            { id: 'user_name', title: '用户名称', type: 'string', columnClass: 'text-center' },
            { id: 'sex', title: '性别', type: 'string', codeTable: sex, columnClass: 'text-center' },
            { id: 'salary', title: '薪水', type: 'number', format: '#,###.00', columnClass: 'text-center' }
        ];
        var gridOption_2_1_1 = {
            lang: 'zh-cn',
            check: true,
            checkWidth: 40,
            ajaxLoad: false,
            exportFileName: '用户列表',
            datas: datas,
            columns: gridColumns_2_1_1,
            gridContainer: 'gridContainer_2_1_1',
            toolbarContainer: 'gridToolBarContainer_2_1_1',
            tools: '',
            pageSize: 10,
            pageSizeLimit: [10, 20, 50]
        };
        var grid_2_1_1 = $.fn.dlshouwen.grid.init(gridOption_2_1_1);
        $(function () {
            //grid_2_1_1.load();
        });
    </script>
    <script>
        //https://os.dlshouwen.com/grid/doc/i18n/zh-cn/example.html#2.2.2
        var gridColumns_2_2_2 = [
            { id: 'UserID', title: '用户编号', type: 'number', columnClass: 'text-center', fastQuery: true, fastQueryType: 'range', headerStyle: 'background:#00a2ca;color:white;' },
            { id: 'UserName', title: '用户名称', type: 'string', columnClass: 'text-center', fastQuery: true, fastQueryType: 'lk', headerStyle: 'background:#00a2ca;color:white;'  },
            { id: 'PassWord', title: 'PassWord', type: 'string', columnClass: 'text-center', hide: true, fastQueryType: 'lk' },
            { id: 'ChineseName', title: 'ChineseName', type: 'string', columnClass: 'text-center', fastQuery: true, fastQueryType: 'lk', headerStyle: 'background:#00a2ca;color:white;' },
            { id: 'Statu', title: 'Statu', type: 'number', format: '#,###.00', columnClass: 'text-center', hideType: 'xs', hide: true, fastQueryType: 'range' },
            { id: 'IsDelete', title: 'IsDelete', type: 'number', format: '#,###.00', columnClass: 'text-center', hideType: 'xs', hide: true, fastQueryType: 'range' },
            { id: 'CreateTime', title: '日期对象', type: 'date', format: 'yyyy-MM-dd hh:mm:ss', columnClass: 'text-center', hideType: 'md|sm|xs', hide: true, fastQueryType: 'range' },
        ];


         function gettoken() {
           let token = '@Html.AntiForgeryToken()';
           return $(token).val();
        }

         

        var gridOption_2_2_2 = {
            lang: 'zh-cn',
            ajaxLoad: true,
            loadURL: '/Role/GetRoleUser',
            exportFileName: '用户列表',
            columns: gridColumns_2_2_2,
            gridContainer: 'gridContainer_2_1_1',
            toolbarContainer: 'gridToolBarContainer_2_1_1',
            tools: '',
            pageSize: 10,
            pageSizeLimit: [10, 20, 50],
            check: true,
            checkWidth: 40
            //parameters: { "__RequestVerificationToken": gettoken() }
            //parameters: parameters
        };

      
      
        var grid_2_2_2 = $.fn.dlshouwen.grid.init(gridOption_2_2_2);
        $(function () {
            var token = document.getElementsByName("__RequestVerificationToken")[0].value
            grid_2_2_2.parameters = new Object();
            grid_2_2_2.parameters['__RequestVerificationToken'] = token;

            //grid_2_2_2.fastQueryParameters = new Object();
            //grid_2_2_2.fastQueryParameters['__RequestVerificationToken'] = gettoken();

            
            //console.log(grid_2_2_2);
            //grid_2_2_2.load();
        });

     var u =    {
                "UserID": 1,
                "UserName": "admin",
                "PassWord": "123",
                "ChineseName": "超级管理员",
                "Status": 0,
                "IsDelete": 0,
                "CreateTime": "\/Date(1584101408137)\/"
        }
    </script>
    <script>
        //b.UserName,a.Tid,a.UserID,a.RoleID 
        var gridColumns_22_22_22 = [
            { id: 'UserID', title: 'UserID', type: 'number', columnClass: 'text-center', fastQuery: true, fastQueryType: 'range', headerStyle: 'background:#00a2ca;color:white;' },
            { id: 'UserName', title: 'UserName', type: 'string', columnClass: 'text-center', fastQuery: true, fastQueryType: 'lk', headerStyle: 'background:#00a2ca;color:white;' },
            { id: 'Tid', title: 'Tid', type: 'number', columnClass: 'text-center', hide: true, fastQueryType: 'range', headerStyle: 'background:#00a2ca;color:white;' },
            { id: 'RoleID', title: 'RoleID', type: 'number', columnClass: 'text-center', hide: true, fastQueryType: 'lk', headerStyle: 'background:#00a2ca;color:white;' },
        ];

        var gridOption3 = {
            lang: 'zh-cn',
            ajaxLoad: true,
            loadURL: '/Role/GetSysUserRoleViewModel',
            exportFileName: '用户列表',
            columns: gridColumns_22_22_22,
            gridContainer: 'gridContainer_2_1_1',
            toolbarContainer: 'gridToolBarContainer_2_1_1',
            tools: '',
            pageSize: 10,
            pageSizeLimit: [10, 15, 20],
            check: true,
            checkWidth: 40
            //parameters: { "__RequestVerificationToken": gettoken() }
            //parameters: parameters
        };
        var grid_3_3_3 = $.fn.dlshouwen.grid.init(gridOption3);
        $(function () {
            var token = document.getElementsByName("__RequestVerificationToken")[0].value;
            grid_3_3_3.parameters = new Object();
            grid_3_3_3.parameters['__RequestVerificationToken'] = token;

            //grid_2_2_2.fastQueryParameters = new Object();
            //grid_2_2_2.fastQueryParameters['__RequestVerificationToken'] = gettoken();


            //console.log(grid_2_2_2);
            grid_3_3_3.load();

            $("#DeleteUserRole").click(function () {
                let record = grid_3_3_3.getCheckedRecords();
                console.log(record);
                let recordCount = grid_3_3_3.getCheckedRecords().length;
                if (recordCount == 0) return;

                 
                let Arr = [];
               
                for (let i = 0; i < record.length; i++) {
                    let n = (record[i].Tid);
                   
                    Arr.push(n);
                }
                let RoleID = record[0].RoleID;
                let str = RoleID + "_"+ Arr.join(',');
                //window.parent.confirmX("确定要删除这些数据？", DeleteUserRole, record);
                try {
                    window.parent.confirmX("确定要删除这些数据？", DeleteUserRole, str);
                } catch {
                    if (confirm("确定要删除这些数据2？")) {
                        DeleteUserRole(str);
                    }
                }
              
            })

            function DeleteUserRole(record) {
                //log(record);
                let token = document.getElementsByName("__RequestVerificationToken")[0].value;
                let arr = record.split('_');
                let RoleID = arr[0];
                $.ajax({
                    url: "/role/SysUserRoleDelete",
                    type: 'post',
                    headers: { "__RequestVerificationToken": token },
                    /*__RequestVerificationToken放在请求头中，是没有效果的，是必须作为参数传递的*/
                    beforeSend: function (XMLHttpRequest) {
                        //XMLHttpRequest.setRequestHeader("__RequestVerificationToken", gettoken());
                    },
                    data: { "data": arr[1] }// $("form").serializeArray(),
                    //dataType: 'json',
                    , success: function (res) {
                        if (res.success) {
                            radioclick(null, RoleID);
                        }
                    },
                    complete: function (xhr) {
                        //console.log(xhr)
                        let StatusCode = xhr.getResponseHeader('StatusCode');
                        if (StatusCode != null && StatusCode != undefined) {
                            alert("StatusCode = " + StatusCode);
                            if (StatusCode == 401) {
                                alert("当前未登录或登录过期，请重新登录!");
                                location.href = "/Login/Index";
                            }
                            if (StatusCode == 302) {
                                alert("没有访问权限");
                            }
                        }

                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(errorThrown);
                    }
                })
            }
        });
        function radioclick(obj, RoleID) {
            //log("xxx")
            // console.log(obj);
            //alert(RoleID);
            let token = document.getElementsByName("__RequestVerificationToken")[0].value
            grid_3_3_3.parameters = new Object();
            grid_3_3_3.parameters['__RequestVerificationToken'] = token;
            grid_3_3_3.parameters['RoleID'] = RoleID;
            grid_3_3_3.refresh(true);
        }
    </script>
</body>
</html>
